Para as questões 2 a 5, considere que as variáveis 'f', 'g', 'h', 'i' e 'j' são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor 'A[]' é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores:
	f: R4
	g: R5
	h: R6
	i: R7
	j: R8
	A: R9
Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1. Escreva os trechos de código assembly do MSP430 para:
	(a) Somente setar o bit menos significativo de R5.
  
      mov.w 01, R11 
      bis.w R5, R11
  
	(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo.
  
      mov.w 03, R11
      bis.w R6, R11
  
	(c) Somente zerar o terceiro bit menos significativo de R7.
  
      mov.w 04, R11
      bic.w R11, R7
  
	(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.
  
      mov.w 0C, R11
      bic.w R11, R8
  
	(e) Somente inverter o bit mais significativo de R9.
  
      mov.w 80, R11
      xor.w R11, R9
  
	(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10. 
  
      mov.w F0, R11
      mov.w 0F, R12
      xor.w R11, R10
      bis.w R12, R10
  

2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	if(i>j) f = g+h+10;
	else f = g-h-10;
  

      cmp R8, R7
      jl ELSE
      mov.w R5, R4
      add.w R6, R4
      add.w #10, R4
      jmp EXIT
      ELSE:
      mov.w R5, R4
      sub.w R6, R4
      sub.w #10, R4
      EXIT:

3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	while(save[i]!=k) i++;
  
  	LOOP:
	mov.w R7, R12		;armazenando o valor de i em um registrador temporario
	rla R12			;multiplicando i por 2
	add.w R10, R12		;R10 = save ; adicionando save a R12
	cmp 0(R12), R9		;comparando save[i] com k
	jeq EXIT		;se save[i] for igual a k, saia do laço
	inc.w R7		;i++
	jmp LOOP
	EXIT:
	
	
4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=0; i<100; i++) A[i] = i*2;
	
	CÓDIGO 1
	mov.w #100, R11
	LOOP:
	mov.w R7, R12		;armazena i em A
	rla R12
	add.w R10, R12
	cmp R7, R11
	jeq EXIT
	inc.w R7
	jmp LOOP
	EXIT:
	
	CÓDIGO 2
	mov.w #100, R11
	LOOP:
	mov.w R7, R10		;armazena i em A
	rla R10
	cmp R7, R11
	jeq EXIT
	inc.w R7
	jmp LOOP
	EXIT:

5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=99; i>=0; i--) A[i] = i*2;


